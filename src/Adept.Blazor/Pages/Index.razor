@page "/"
@using Adept.Data
@using Adept.Data.Model
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@implements IDisposable
@inject IRoutineService RoutineService;
@inject RoutineState RoutineState;

@*<PageTitle>Index</PageTitle>*@

<MudText Typo="Typo.h3" GutterBottom="true">Hello!</MudText>
<MudText Class="mb-8">@_welcomeText</MudText>
@if(_selectedRoutine == null)
{
    if (_routineCount == 0)
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@AddNewRoutine">Add new routine</MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@SelectRoutine">Select routine</MudButton>
    }
}
else
{
    
    <MudText Class="mb-8">Next Workout is: </MudText>
    
    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@StartWorkout">Start workout</MudButton>
}


@code{
    internal Routine? _selectedRoutine;
    private int _routineCount;
    private string _welcomeText
    {
        get
        {
            string text;
            if (_selectedRoutine == null)
            {
                text = "No routine selected routine";
            }
            else
            {
                text = "Current routine: " + _selectedRoutine.Name;
            }
            return text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _selectedRoutine = RoutineState.SelectedRoutine;
        _routineCount = await RoutineService.GetRoutinesCountAsync();
    
        RoutineState.OnChange += StateHasChanged;
        await base.OnInitializedAsync();
    }

    
    public void Dispose()
    {
        RoutineState.OnChange -= StateHasChanged;
    }


    private async Task StartWorkout()
    {
        var routine = new Routine{ Name = "Jeff Nippard PPL" };
        routine.WorkoutTemplates.Add(new WorkoutTemplate { Name = "Push 1", Order = 1 });
        await RoutineService.AddRoutineAsync(routine);
        await RoutineService.AddOrUpdateCurrentRoutine(routine.Id);
        _selectedRoutine = routine;
    }

    private async Task AddNewRoutine()
    {
        var routine = new Routine{ Name = "Jeff Nippard PPL" };
        routine.WorkoutTemplates.Add(new WorkoutTemplate { Name = "Push 1", Order = 1 });
        await RoutineService.AddRoutineAsync(routine);
        await RoutineService.AddOrUpdateCurrentRoutine(routine.Id);
        _selectedRoutine = routine;
    }

    private async Task SelectRoutine()
    {
        var routine = new Routine{ Name = "Jeff Nippard PPL" };
        routine.WorkoutTemplates.Add(new WorkoutTemplate { Name = "Push 1", Order = 1 });
        await RoutineService.AddRoutineAsync(routine);
        await RoutineService.AddOrUpdateCurrentRoutine(routine.Id);
        _selectedRoutine = routine;
    }
}
