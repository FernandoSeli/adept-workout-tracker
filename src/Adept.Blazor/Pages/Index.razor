@page "/"
@using Adept.Data
@using Adept.Data.Model
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@implements IDisposable
@inject IRoutineRepository RoutineRepository;
@inject NavigationManager NavigationManager;
@inject RoutineState RoutineState;

@*<PageTitle>Index</PageTitle>*@

<MudText Typo="Typo.h3" GutterBottom="true">Hello!</MudText>
<MudText Typo="Typo.body1">@_welcomeText</MudText>
@if(_selectedRoutine == null)
{
    if (_routineCount == 0)
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@AddNewRoutine">Add new routine</MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@SelectRoutine">Select routine</MudButton>
    }
}
else
{
    
    <MudText Class="mb-8">Your last Workout is: </MudText>
    
    @foreach (var workoutTemplate in _selectedRoutine.WorkoutTemplates.OrderBy(x =>x.Order))
    {
        <MudCard Style="margin:40px">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@workoutTemplate.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @foreach (var workoutTemplateExercise in workoutTemplate.TemplateExerciseContainers)
                {
                    <MudText>@workoutTemplateExercise.Order.ToString()</MudText>   
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() =>StartWorkout(workoutTemplate.Id))">Start workout</MudButton>
            </MudCardActions>
        </MudCard>
    }
}


@code{
    internal Routine? _selectedRoutine;
    private int _routineCount;
    private string _welcomeText
    {
        get
        {
            return _selectedRoutine is null ?
                    (_routineCount == 0 ? "No routine found" : "No routine selected") :
                    "Current routine: " + _selectedRoutine.Name;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _selectedRoutine = RoutineState.SelectedRoutine;
        _routineCount = await RoutineRepository.GetRoutinesCountAsync();

        RoutineState.OnChange += StateHasChanged;
        await base.OnInitializedAsync();
    }


    public void Dispose()
    {
        RoutineState.OnChange -= StateHasChanged;
    }


    private async Task StartWorkout(int workoutTemplateId)
    {
        NavigationManager.NavigateTo($"workout/{workoutTemplateId}");
    }

    private async Task AddNewRoutine()
    {
        NavigationManager.NavigateTo("routine");
    }

    private async Task SelectRoutine()
    {
        NavigationManager.NavigateTo("routine");
    }
}
