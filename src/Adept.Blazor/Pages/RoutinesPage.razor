@page "/routine"
@using System.Text.Json
@implements IDisposable
@inject RoutineState RoutineState;
@inject HttpClient Http;
@inject IExerciseRepository ExerciseRepository;
@inject IRoutineRepository RoutineRepository;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;
@inject DialogHelper DialogHelper;


<MudText Typo="Typo.h3">Routine</MudText>
<MudExpansionPanels MultiExpansion="true">

@foreach (var routine in _routines)
{
    <MudExpansionPanel>
        <TitleContent>
            <div class="d-flex">
                <MudText>@routine.Name <strong>@(routine.IsSelected ? "Selected" : "")</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudList Clickable="true">
            @foreach (var workoutTemplate in routine.WorkoutTemplates.OrderBy(x=> x.Order).ToList())
            {
                <MudListItem Text="@workoutTemplate.Name" OnClick="(() => OpenWorkoutTemplateDialog(routine, workoutTemplate))"/>
            }
            </MudList>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => OpenRoutineDialog(routine))">Modify Routine</MudButton>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => SelectRoutine(routine))">Select Routine</MudButton>
        </ChildContent>
    </MudExpansionPanel>
}
</MudExpansionPanels>

<MudButton Variant="Variant.Text" Color="Color.Primary"  OnClick="(() => OpenRoutineDialog(new Routine()))">Add new routine</MudButton>
<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@DeleteRoutine">Delete</MudButton>
<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@AddRoutine">Add</MudButton>
<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@RefreshRoutine">Add</MudButton>
           
@code {
    [Parameter]
    public int RoutineId { get; set; }

    private List<Routine> _routines = new List<Routine>();

    private bool open;
    protected override async Task OnInitializedAsync()
    {
        _routines = await RoutineRepository.GetRoutinesAsync();
        RoutineState.OnChange += StateHasChanged;
        
        


        await base.OnInitializedAsync();
    }


    public void Dispose()
    {
        RoutineState.OnChange -= StateHasChanged;
    }

    private async Task DeleteRoutine()
    {

        _routines = (await RoutineRepository.GetRoutinesAsync()).ToList();
        await RoutineRepository.RemoveAsync(_routines.FirstOrDefault());
    }
    private async Task AddRoutine()
    {

        var routine = await Http.GetFromJsonAsync<Routine>("/_content/Adept.Blazor/sample-data/Routine.json");
        await RoutineRepository.AddOrUpdateAsync(routine);
    }
    private async Task RefreshRoutine()
    {
        _routines = (await RoutineRepository.GetRoutinesAsync()).ToList();
    }

    private async Task OpenRoutineDialog(Routine routine)
    {
        var result = await DialogHelper.OpenRoutineDialogAsync(routine);
        
        _routines.AddUpdateOrDeleteRoutine(result.Routine, result.Deleted);
    }

    private async Task OpenWorkoutTemplateDialog(Routine routine, WorkoutTemplate workoutTemplate)
    {
        var result = await DialogHelper.OpenWorkoutTemplateDialogAsync(workoutTemplate);
        routine.WorkoutTemplates.AddUpdateOrDeleteWorkoutTemplate(result.WorkoutTemplate, result.Deleted);
    }


    private async Task SelectRoutine(Routine routine)
    {
        await RoutineRepository.AddOrUpdateCurrentRoutine(routine.Id);
        RoutineState.SetSelectedRoutine(routine);
    }
    
}
