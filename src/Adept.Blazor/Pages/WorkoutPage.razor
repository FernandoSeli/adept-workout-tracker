@page "/workout"
@page "/workout/{workoutTemplateId:int}"

@using System.Text.Json
@using System.Text.Json.Serialization
@implements IDisposable
@inject RoutineState RoutineState;
@inject HttpClient Http;
@inject IExerciseRepository ExerciseRepository;
@inject IWorkoutTemplateRepository WorkoutTemplateRepository;
@inject IRoutineRepository RoutineRepository;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;
@inject DialogHelper DialogHelper;


<MudText Typo="Typo.h3">Workout</MudText>
<MudButton Color="Color.Inherit" OnClick="(() =>StartWorkout())">Start New Workout</MudButton>
<MudButton Color="Color.Inherit" OnClick="ChooseFromTemplate">Choose From Template</MudButton>
@if (_showTemplateSelector)
{
    @foreach (var workoutTemplate in WorkoutTemplates)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@workoutTemplate.Name</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@workoutTemplate.Name</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => StartWorkout(workoutTemplate))">Start Workout</MudButton>
            </MudCardActions>
        </MudCard>
    }
}
@if (_workoutStarted)
{
    foreach (var logExercise in WorkoutLog.LogExerciseContainers.OrderBy(x => x.Order))
    {
        @if (logExercise.IsMultiExercise)
        {
            foreach (var logMultiExercise in logExercise.LogMultiExercises.OrderBy(x => x.Order))
            {
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => AddWorkoutLogMultiExerciseSet(logMultiExercise))">Add MultiSets</MudButton>
                <LogMultiExerciseForm LogMultiExercise="@logMultiExercise" />
            }
        }
        else 
        {
            <LogSingleExerciseForm LogSingleExercise="@logExercise.LogSingleExercise" />
        }

    }
}
<MudDrawer DisableOverlay="false" Width="100%" Height="50%" @bind-Open="@open" Anchor="Anchor.Bottom" Elevation="5" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">@_drawerHeader</MudText>
        <MudButton Color="Color.Inherit"  OnClick="ToggleDrawer">close</MudButton>
    </MudDrawerHeader>
    <DynamicComponent Type="selectedType" />
</MudDrawer>
<MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Elevation="1">
    <MudSpacer />
    <MudButton  Color="Color.Inherit"  OnClick="ShowCalculator">repmax calculator</MudButton>
    <MudSpacer />
    <MudDivider Vertical="true" FlexItem="true" />
    <MudSpacer />
    <MudButton Color="Color.Inherit" OnClick="ShowTimer">rest timer </MudButton>
    <MudSpacer />
    <MudDivider Vertical="true" FlexItem="true" />
    <MudSpacer />
    <MudButton Color="Color.Inherit" OnClick="ShowStopwatch">stopwatch</MudButton>
    <MudSpacer />
</MudAppBar>

@code {
    [Parameter]
    public int WorkoutTemplateId { get; set; }
    bool _workoutStarted = false;
    bool open = false;
    bool showTimer = false;
    bool showRepMaxCalculator = false;
    bool showStopwatch = false;
    bool _showTemplateSelector = false;
    JsonSerializerOptions _options = new()
        {
            ReferenceHandler = ReferenceHandler.IgnoreCycles,
            WriteIndented = true
        };
    string _drawerHeader = "";
    WorkoutLog WorkoutLog { get; set; }
    List<WorkoutTemplate> WorkoutTemplates { get; set; }
    Type selectedType = typeof(RepMaxCalculator);
    protected override async Task OnInitializedAsync()
    {
        if (WorkoutTemplateId != 0)
        {
            var workoutTemplate = RoutineState.SelectedRoutine.WorkoutTemplates.FirstOrDefault(x => x.Id == WorkoutTemplateId);
            WorkoutLog = new WorkoutLog(workoutTemplate);
            var test = JsonSerializer.Serialize(WorkoutLog, _options);
        }
        await base.OnInitializedAsync();
    }

    private async Task AddWorkoutLogMultiExerciseSet(LogMultiExercise logMultiExercise)
    {

        logMultiExercise.MultiExerciseSets.Add(new LogMultiExerciseSet(logMultiExercise.GetNextExerciseSetOrder()));
    }
    public async Task StartWorkout(WorkoutTemplate? workoutTemplate = null)
    {
        if (workoutTemplate == null)
        {
            WorkoutLog = new WorkoutLog();
        }
        else
        {
            WorkoutLog = new WorkoutLog(workoutTemplate);
            Console.WriteLine(JsonSerializer.Serialize(WorkoutLog, _options));
        }
        _workoutStarted = true;
        _showTemplateSelector = false;
    }

    public async Task ChooseFromTemplate()
    {
        _showTemplateSelector = true;
        WorkoutTemplates = await WorkoutTemplateRepository.GetWorkoutTemplatesAsync();
    }

    public void Dispose()
    {
        RoutineState.OnChange -= StateHasChanged;
    }

    void ShowCalculator()
    {
        _drawerHeader = "Rep Max Calulator";
        selectedType = typeof(RepMaxCalculator);
        ToggleDrawer();
    }

    void ShowTimer()
    {
        _drawerHeader = "Rest Timer";
        selectedType = typeof(RestTimer);
        ToggleDrawer();
    }

    void ShowStopwatch()
    {

        selectedType = typeof(StopwatchTimer);
        _drawerHeader = "Stopwatch";
        ToggleDrawer();
    }
    void ToggleDrawer()
    {
        open = !open;
    }

}
