@page "/workout"
@page "/workout/{workoutTemplateId:int}"

@using System.Text.Json
@using System.Text.Json.Serialization
@implements IDisposable
@inject RoutineState RoutineState;
@inject HttpClient Http;
@inject IExerciseRepository ExerciseRepository;
@inject IRoutineRepository RoutineRepository;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;
@inject DialogHelper DialogHelper;


<MudText Typo="Typo.h3">Workout</MudText>
           

<MudDrawer DisableOverlay="true"  @bind-Open="@open" Anchor="Anchor.Bottom" Elevation="5" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">@_drawerHeader</MudText>
        
    <MudButton  Color="Color.Inherit"  OnClick="ToggleDrawer">close</MudButton>

    </MudDrawerHeader>
    @if (showTimer)
    {
        <RestTimer/>
    }
    else if (showRepMaxCalculator)
    {
        <RepMaxCalculator/>
    }
    else if (showStopwatch)
    {
        <StopwatchTimer/>
    }
</MudDrawer>
<MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Elevation="1">
    <MudSpacer />
    <MudButton  Color="Color.Inherit"  OnClick="ShowCalculator">repmax calculator </MudButton>
    <MudSpacer />
    <MudDivider Vertical="true" FlexItem="true" />
    <MudSpacer />
    <MudButton Color="Color.Inherit" OnClick="ShowTimer">rest timer </MudButton>
    <MudSpacer />
    <MudDivider Vertical="true" FlexItem="true" />
    <MudSpacer />
    <MudButton Color="Color.Inherit" OnClick="ShowStopwatch">stopwatch</MudButton>
    <MudSpacer />
</MudAppBar>

@code {
    [Parameter]
    public int WorkoutTemplateId { get; set; }

    bool open = false;
    bool showTimer = false;
    bool showRepMaxCalculator = false;
    bool showStopwatch = false;
    string _drawerHeader = "";
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(WorkoutTemplateId);
        //var workoutTemplate = RoutineState.SelectedRoutine.WorkoutTemplates.FirstOrDefault(x => x.Id == WorkoutTemplateId);
        //var workoutLog = new WorkoutLog(workoutTemplate);
        //JsonSerializerOptions options = new()
        //{
        //        ReferenceHandler = ReferenceHandler.IgnoreCycles,
        //        WriteIndented = true
        //    };
        //var test =JsonSerializer.Serialize(workoutLog, options);
        await base.OnInitializedAsync();
    }


    public void Dispose()
    {
        RoutineState.OnChange -= StateHasChanged;
    }

    void ShowCalculator()
    {
        _drawerHeader = "Rep Max Calulator";
        showRepMaxCalculator = true;
        showTimer = false;
        showStopwatch = false;
        ToggleDrawer();
    }

    void ShowTimer()
    {
        _drawerHeader = "Rest Timer";
        showRepMaxCalculator = false;
        showTimer = true;
        showStopwatch = false;
        ToggleDrawer();
    }

    void ShowStopwatch()
    {
        _drawerHeader = "Stopwatch";
        showStopwatch = true;
        showRepMaxCalculator = false;
        showTimer = false;
        ToggleDrawer();
    }
    void ToggleDrawer()
    {
        open = !open;
    }

}
