@page "/workout"
@page "/workout/{workoutTemplateId:int}"

@using System.Text.Json
@using System.Text.Json.Serialization
@implements IDisposable
@inject RoutineState RoutineState;
@inject HttpClient Http;
@inject IExerciseRepository ExerciseRepository;
@inject IWorkoutTemplateRepository WorkoutTemplateRepository;
@inject IRoutineRepository RoutineRepository;
@inject NavigationManager NavigationManager;
@inject IDialogService DialogService;
@inject DialogHelper DialogHelper;


<MudText Typo="Typo.h3">Workout</MudText>

@if (!_workoutStarted)
{
    <MudButton Color="Color.Inherit" OnClick="(() =>StartWorkout())">Start New Workout</MudButton>
    @*<MudButton Color="Color.Inherit" OnClick="ChooseFromTemplate">Choose From Template</MudButton>*@
}
@if (_showTemplateSelector)
{
    <MudGrid Spacing="2">
        @foreach (var workoutTemplate in WorkoutTemplates)
        {
            <MudItem xs="12" md="6" lg="4" >
                <MudCard class="h-100">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@workoutTemplate.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>

                            @*<MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />*@
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @foreach (var templateExercise in workoutTemplate.TemplateExerciseContainers.OrderBy(x => x.Order))
                        {
                            <MudText>@templateExercise.GetExerciseName()</MudText>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => StartWorkout(workoutTemplate))">Start Workout</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }

    </MudGrid>
}
@if (_workoutStarted)
{
    @*<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="(() => AddLogExerciseAsync(WorkoutLog))" />*@
    @*<MudExpansionPanels MultiExpansion="true">*@
    @foreach (var logExercise in WorkoutLog.LogExerciseContainers.OrderBy(x => x.Order))
    {
        
        <MudCard class="my-3">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Exercise @logExercise.Order</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    @if (logExercise.IsMultiExercise)
                    {
                            <MudMenuItem OnClick="(() => AddNewMultiExerciseSets(logExercise))">Add new Exercise</MudMenuItem>
                            <MudMenuItem OnClick="(() => DuplicateMultiExercise(logExercise))">Duplicate Set</MudMenuItem>
                    }


                        <MudMenuItem OnClick="(() => DeleteLogExercise(logExercise))">Delete Set</MudMenuItem>
                    </MudMenu>

                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
            @*<MudExpansionPanel Text="@logExercise.Order.ToString()">*@
            @if (logExercise.IsMultiExercise)
            {
                 @*<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => AddLogMultiExerciseSet(logExercise))">Add MultiSets</MudButton>*@

                @if (logExercise.LogMultiExercises.Any())
                {
                    <MudTabs Elevation="4" Rounded="true" AlwaysShowScrollButtons="true" Color="@Color.Primary" Class="mt-2">
                    @foreach (var logMultiExercise in logExercise.LogMultiExercises.OrderBy(x => x.Order))
                    {
                        <MudTabPanel Text="@logMultiExercise.Order.ToString()">
                            <LogMultiExerciseForm LogMultiExercise="@logMultiExercise" />
                        </MudTabPanel>
                    }
                    </MudTabs>
                }
            }
            else 
            {
                <LogSingleExerciseForm LogSingleExercise="@logExercise.LogSingleExercise" />
            }
                <MudTextField T="string" Label="Note" Variant="Variant.Text" Text="@logExercise.Note" Lines="2" Class="my-2" />
            </MudCardContent>
            <MudCardActions>
            </MudCardActions>
        </MudCard>
    }
    <MudAppBar Dense="true" Bottom="true" Fixed="true" Color="Color.Primary" Elevation="1">
        <MudSpacer />
        <MudButton Color="Color.Inherit" OnClick="AddLogSingleExerciseAsync">set</MudButton>
        <MudSpacer />
        <MudDivider Vertical="true" FlexItem="true" />
        <MudSpacer />
        <MudSpacer />
        <MudButton Color="Color.Inherit" OnClick="AddLogMultiExerciseAsync">multiset</MudButton>
        <MudSpacer />
        <MudDivider Vertical="true" FlexItem="true" />
        <MudSpacer />
        <MudSpacer />
        <MudButton Color="Color.Inherit" OnClick="ShowCalculator">repmax calculator</MudButton>
        <MudSpacer />
        <MudDivider Vertical="true" FlexItem="true" />
        <MudSpacer />
        <MudButton Color="Color.Inherit" OnClick="ShowTimer">timer</MudButton>
        <MudSpacer />
        <MudDivider Vertical="true" FlexItem="true" />
        <MudSpacer />
        <MudButton Color="Color.Inherit" OnClick="ShowStopwatch">stopwatch</MudButton>
        <MudSpacer />
    </MudAppBar>
}

<MudDrawer DisableOverlay="false" Width="100%" Height="50%" @bind-Open="@open" Anchor="Anchor.Bottom" Elevation="5" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">@_drawerHeader</MudText>
        <MudButton Color="Color.Inherit" OnClick="ToggleDrawer">close</MudButton>
    </MudDrawerHeader>
    <DynamicComponent Type="selectedType" />
</MudDrawer>

@code {
    [Parameter]
    public int WorkoutTemplateId { get; set; }
    bool _workoutStarted = false;
    bool open = false;
    bool showTimer = false;
    bool showRepMaxCalculator = false;
    bool showStopwatch = false;
    bool _showTemplateSelector = false;
    JsonSerializerOptions _options = new()
        {
            ReferenceHandler = ReferenceHandler.IgnoreCycles,
            WriteIndented = true
        };
    string _drawerHeader = "";
    WorkoutLog WorkoutLog { get; set; }
    List<WorkoutTemplate> WorkoutTemplates = new List<WorkoutTemplate>();
    Type selectedType = typeof(RepMaxCalculator);

    protected override async Task OnInitializedAsync()
    {
        //if (WorkoutTemplateId != 0)
        //{
        //    var workoutTemplate = RoutineState.SelectedRoutine.WorkoutTemplates.FirstOrDefault(x => x.Id == WorkoutTemplateId);
        //    WorkoutLog = new WorkoutLog(workoutTemplate);
        //    var test = JsonSerializer.Serialize(WorkoutLog, _options);
        //}
        await base.OnInitializedAsync();
        await ChooseFromTemplate();
    }

    private async Task AddLogSingleExerciseAsync()
    {
        var order = WorkoutLog.GetNextLogExerciseOrder();
        var container = new LogExerciseContainer(order, false);
        WorkoutLog.LogExerciseContainers.Add(container);
    }

    private async Task AddLogMultiExerciseAsync()
    {

        var order = WorkoutLog.GetNextLogExerciseOrder();
        var container = new LogExerciseContainer(order, true);

        WorkoutLog.LogExerciseContainers.Add(container);
        //logMultiExercise.MultiExerciseSets.Add(new LogMultiExerciseSet(logMultiExercise.GetNextExerciseSetOrder()));
    }

    private async Task AddNewMultiExerciseSets(LogExerciseContainer logExerciseContainer)
    {
        //await DialogHelper.OpenNewLogMultiExerciseSetAsync(logExerciseContainer);
        var logMultiExerciseSet = await DialogHelper.OpenNewLogMultiExerciseSetAsync();
        if (logMultiExerciseSet != null)
        {
            foreach (var logMultiExercise in logExerciseContainer.LogMultiExercises)
            {
                logMultiExercise.MultiExerciseSets.Add(logMultiExerciseSet);
            }
        }
    }

    private async Task DuplicateMultiExercise(LogExerciseContainer logExerciseContainer)
    {
        var logMultiExercise = await DialogHelper.OpenDuplicateLogMultiExerciseAsync(logExerciseContainer);
        if (logMultiExercise != null)
        {
            logExerciseContainer.LogMultiExercises.Add(logMultiExercise);
        }
    }

    public void DeleteLogExercise(LogExerciseContainer logExerciseContainer)
    {
        WorkoutLog.LogExerciseContainers.Remove(logExerciseContainer);
    }

    public async Task StartWorkout(WorkoutTemplate? workoutTemplate = null)
    {
        if (workoutTemplate == null)
        {
            WorkoutLog = new WorkoutLog();
        }
        else
        {
            WorkoutLog = new WorkoutLog(workoutTemplate);
            Console.WriteLine(JsonSerializer.Serialize(WorkoutLog, _options));
        }
        _workoutStarted = true;
        _showTemplateSelector = false;
    }

    public async Task ChooseFromTemplate()
    {
        _showTemplateSelector = true;
        while (WorkoutTemplates.Count == 0)
        {
            WorkoutTemplates = await WorkoutTemplateRepository.GetWorkoutTemplatesAsync();
            await Task.Delay(1000);
        }
    }

    public void Dispose()
    {
        RoutineState.OnChange -= StateHasChanged;
    }

    void ShowCalculator()
    {
        _drawerHeader = "Rep Max Calulator";
        selectedType = typeof(RepMaxCalculator);
        ToggleDrawer();
    }

    void ShowTimer()
    {
        _drawerHeader = "Rest Timer";
        selectedType = typeof(RestTimer);
        ToggleDrawer();
    }

    void ShowStopwatch()
    {

        selectedType = typeof(StopwatchTimer);
        _drawerHeader = "Stopwatch";
        ToggleDrawer();
    }

    void ToggleDrawer()
    {
        open = !open;
    }

}
