@inject IGenericRepository<LogMultiExercise> LogMultiExerciseRepository
@inject IGenericRepository<LogMultiExerciseSet> LogMultiExerciseSetRepository

<MudTable Items="@LogMultiExercise.MultiExerciseSets" Dense="true" CommitEditTooltip="Commit Edit"
        Breakpoint="Breakpoint.None">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Sets</MudText>

            <MudSpacer />
@*
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="(() => AddExerciseSet(LogMultiExercise))"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Primary" OnClick="(() => DeleteLastExerciseSet(LogMultiExercise))"></MudIconButton>*@
        </ToolBarContent>
        <ColGroup>
            <col style="width:25px;" />
            <col />
            <col style="width:25px;" />
            <col style="width:25px;" />
        </ColGroup>
        <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<LogMultiExerciseSet, object>(x=>x.Order)">Order</MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudGrid Spacing="_gridSpacing" Justify="_gridJustify" Class="text-center">
                <MudItem xs="_firstLineXs" sm="_firstLineSm">
                    Exercise
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    Weight
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    Reps
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    @*Done*@
                </MudItem>
            </MudGrid>
        </MudTh> 
        <MudTh></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Order">@context.Order</MudTd>
        <MudTd DataLabel="Exercise">
            <MudGrid Spacing="_gridSpacing" Justify="_gridJustify" Class="text-center">
                <MudItem xs="_firstLineXs" sm="_firstLineSm">
                    @context.Exercise.Name
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    @context.WeightAchieved
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    @context.RepsAchieved
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    <MudToggleIconButton @bind-Toggled="@context.Done"
                                            Icon="@Icons.Filled.CheckCircleOutline" Color="@Color.Error" Size="Size.Small"
                                            ToggledIcon="@Icons.Filled.CheckCircle" ToggledColor="@Color.Success" ToggledTitle="Done" ToggledSize="Size.Small" />

                </MudItem>
            </MudGrid>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete"  OnClick="(() => DeleteMultiExerciseSet(context))" /> 
        </MudTd>
        @*<MudTd DataLabel="Weight">@context.WeightAchieved</MudTd>
        <MudTd DataLabel="Reps">@context.RepsAchieved</MudTd>
        <MudTd DataLabel="Done">
                    </MudTd>*@
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Order">
            <MudNumericField Min="1" @bind-Value="@context.Order" Required />
        </MudTd> 
        <MudTd DataLabel="Exercise">
            <MudGrid Spacing="_gridSpacing" Justify="_gridJustify" Class="text-center">
                <MudItem xs="_firstLineXs" sm="_firstLineSm">
                    <ExerciseAutocomplete Exercise="@context.Exercise"></ExerciseAutocomplete>
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    <MudNumericField Min="1" @bind-Value="@context.WeightAchieved" Required />
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm">
                    <MudNumericField @bind-Value="@context.RepsAchieved" Required Min="1" />
                </MudItem>
                <MudItem xs="_secondLineXs" sm="_secondLineSm" class="d-flex justify-content-center align-items-center">
                    <MudToggleIconButton @bind-Toggled="@context.Done"
                                         Icon="@Icons.Filled.CheckCircleOutline" Color="@Color.Error" Size="Size.Small"
                                         ToggledIcon="@Icons.Filled.CheckCircle" ToggledColor="@Color.Success" ToggledTitle="Done" ToggledSize="Size.Small" />

                </MudItem>
            </MudGrid>
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public LogMultiExercise LogMultiExercise { get; set; }
    private int _secondLineXs = 3;
    private int _firstLineXs = 12;
    private int _secondLineSm = 2;
    private int _firstLineSm = 6;
    private int _gridSpacing = 1;
    private Justify _gridJustify = Justify.SpaceEvenly;

    private void AddExerciseSet(LogMultiExercise multiExercise)
    {
        var setOrder = multiExercise.GetNextExerciseSetOrder();
        Console.WriteLine(JsonSerializer.Serialize(new LogMultiExerciseSet(setOrder)));

        multiExercise.MultiExerciseSets.Add(new LogMultiExerciseSet(setOrder));
    }

    private async Task DeleteExerciseSet(LogMultiExercise multiExerciseSet, LogMultiExerciseSet exerciseSet)
    {
        if (exerciseSet.Id != 0)
        {
            await LogMultiExerciseSetRepository.RemoveAsync(exerciseSet);
        }
        multiExerciseSet.MultiExerciseSets.Remove(exerciseSet);
    }


    private async Task DeleteLastExerciseSet(LogMultiExercise multiExercise)
    {
        var exerciseSet = multiExercise.MultiExerciseSets.LastOrDefault();
        if (exerciseSet != null)
        {
            if (exerciseSet.Id != 0)
            {
                await LogMultiExerciseSetRepository.RemoveAsync(exerciseSet);
            }
            multiExercise.MultiExerciseSets.Remove(exerciseSet);
        }
    }
    private async Task DeleteMultiExerciseSet(LogMultiExerciseSet multiExerciseSet)
    {
        if (multiExerciseSet.Id != 0)
        {
            await LogMultiExerciseSetRepository.RemoveAsync(multiExerciseSet);
        }
        LogMultiExercise.MultiExerciseSets.Remove(multiExerciseSet);
    }
}
