@inject IGenericRepository<TemplateSingleExerciseSet> TemplateSingleExerciseSetRepository;
@if (TemplateSingleExercise.TemplateSets.Any())
{
    <MudTabs Elevation="4" Rounded="true" AlwaysShowScrollButtons="true" Color="@Color.Primary" Class="mt-4">
        @foreach (var set in TemplateSingleExercise.TemplateSets)
    {
        <MudTabPanel  Text="@set.Name">
            <MudNumericField @bind-Value="@set.Order" Label="Order"/>
            <MudNumericField @bind-Value="@set.Repetition" Label="Reps"/>
            <MudNumericField @bind-Value="@set.Rest" Label="Rest"/>
            <MudNumericField @bind-Value="@set.Weight" Label="Weight"/>
            <MudTextField @bind-Value="@set.Note" Label="Note"/>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => DeleteSet(set))">Delete Set</MudButton>
        </MudTabPanel>
    }
    </MudTabs>
}
@code {
    [Parameter]
    public TemplateSingleExercise TemplateSingleExercise { get; set; }


    private async Task DeleteSet(TemplateSingleExerciseSet set)
    {
        if (set.Id != 0)
        {
            await TemplateSingleExerciseSetRepository.RemoveAsync(set);
        }
        TemplateSingleExercise.TemplateSets.Remove(set);
    }
}
