@inject IGenericRepository<WorkoutTemplate> WorkoutTemplateRepository
@inject IGenericRepository<TemplateExerciseContainer> TemplateExerciseContainerRepository

<MudTextField  @bind-Value="@WorkoutTemplate.Name" Label="Name"/>
<MudNumericField   @bind-Value="@WorkoutTemplate.Order" Label="Order"/>
<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@AddTemplateSingleExercise">Add Exercise</MudButton>
<MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@AddTemplateMultiExercise">Add Exercise</MudButton>
<MudExpansionPanels MultiExpansion="true">
@foreach (var templateExercise in WorkoutTemplate.TemplateExerciseContainers.OrderBy(x=> x.Order))
{
    <MudExpansionPanel Text="@templateExercise.Order.ToString()">
        <MudNumericField @bind-Value="@templateExercise.Order" Label="Order"/>
        <MudTextField @bind-Value="@templateExercise.Note" Label="Note"/>
        @*<MudSwitch @bind-Checked="@templateExercise.IsMultiExercise" Label="Is Multi Exercise" Color="Color.Info" />*@

    @*    @if(templateExercise is WorkoutTemplateMultiExercise)
        {
            var workoutTemplateMultiExercise = (WorkoutTemplateMultiExercise)templateExercise;

            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => AddTemplateMultiExerciseSet(workoutTemplateMultiExercise))">Add MultiSets</MudButton>
                <TemplateMultiExerciseSetFields WorkoutTemplateMultiExercise="@workoutTemplateMultiExercise" />
        }
        else if(templateExercise is WorkoutTemplateSingleExercise)
        {
            var workoutTemplateSingleExercise = (WorkoutTemplateSingleExercise)templateExercise;
            <ExerciseAutocomplete Exercise="@templateExercise.Exercise"></ExerciseAutocomplete>
            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => AddTemplateSet(workoutTemplateSingleExercise))">Add Sets</MudButton>
            
           
            <TemplateExerciseSetFields WorkoutTemplateSingleExercise="@workoutTemplateSingleExercise" />
        }
*@

        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="(() => DeleteTemplateExercise(templateExercise))">Delete Exercise</MudButton>

    </MudExpansionPanel>
}
</MudExpansionPanels>

@code {
    private bool _isNew => WorkoutTemplate.Id == 0;

    [Parameter]
    public WorkoutTemplate WorkoutTemplate { get; set; }


    private void AddTemplateSingleExercise()
    {
        var templateOrder = WorkoutTemplate.GetNextTemplateExerciseOrder();
        //WorkoutTemplate.TemplateExerciseContainers.Add(new WorkoutTemplateSingleExercise(templateOrder));

    }
    private void AddTemplateMultiExercise()
    {
        var templateOrder = WorkoutTemplate.GetNextTemplateExerciseOrder();
        //WorkoutTemplate.TemplateExerciseContainers.Add(new WorkoutTemplateMultiExercise(templateOrder));

    }
    private void AddTemplateSet(TemplateSingleExercise workoutTemplateExercise)
    {
        var setOrder = workoutTemplateExercise.GetNextSetOrder();
        //workoutTemplateExercise.TemplateSets.Add(new WorkoutTemplateSet(setOrder));
    }

    private void AddTemplateMultiExerciseSet(TemplateMultiExercise workoutTemplateExercise)
    {
        var setOrder = workoutTemplateExercise.GetNextExerciseSetOrder();
        //workoutTemplateExercise.MultiExerciseSets.Add(new WorkoutTemplateMultiExerciseSet(setOrder));
    }


    private async Task DeleteTemplateExercise(TemplateExerciseContainer templateExerciseContainer)
    {
        if (templateExerciseContainer.Id != 0)
        {
            await TemplateExerciseContainerRepository.RemoveAsync(templateExerciseContainer);
        }
        //if (workoutTemplateExercise is WorkoutTemplateSingleExercise)
        //{
        //    WorkoutTemplate.WorkoutTemplateSingleExercises.Remove((WorkoutTemplateSingleExercise)workoutTemplateExercise);
        //}
        //else if (workoutTemplateExercise is WorkoutTemplateMultiExercise)
        //{
        //    WorkoutTemplate.WorkoutTemplateMultiExercises.Remove((WorkoutTemplateMultiExercise)workoutTemplateExercise);
        }
    }

    
     
}
